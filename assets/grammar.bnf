<start> ::= (<func>)* <main> (<func>)* <END> # refact IMPLEMENT

<func> ::= "алё" <NAME> ":-)" <vars>? ";-)" <body> # refact IMPLEMENT FIXME not args
<main> ::= "привет_масик" <body> # refact IMPLEMENT
<vars> ::= <NAME> ("ещё" <NAME>)* # refact IMPLEMENT

<statement> ::= <if> | <while> 
             | ((<declaration> | <expr> | <ret>)? ("пж-пж")+) # refact IMPLEMENT

<expr> ::= <assignment> # FIXME return val in backend
<assignment> ::=  <compare_eq> 
    ( 
        ("всего_за" 
        |       "подороже" |       "подешевле" 
        | "очень_подороже" | "очень_подешевле" 
        |       "подороже_что_пиздец"
        ) 
        <assignment> 
    )*
<compare_eq> ::= <compare> (("близняшки" | "какашки") <compare>)*
<compare> ::= <sum> 
    (
        (    "тут_дороже:--" |    "тут_мб_дороже:--" 
        | "--:тут_дороже"    | "--:тут_мб_дороже"
        ) 
        <sum>
    )*
<sum> ::= <mul> (("плюсик" | "минусик") <mul>)*
<mul> ::= <pow> (("звёздочка" | "очень_минусик") <pow>)*
<pow> ::= <brackets> ("очень_звёздочка" <pow>)*
<brackets> ::= ":-)" <expr> ";-)" | <var_num_func> # refact IMPLEMENT
<var_num_func> ::= <NUM> | <call_func> | <NAME>  # refact IMPLEMENT

<call_func> ::= <NAME> ":-)" <args>? ";-)" # refact IMPLEMENT
<args> ::= <expr> ("ещё" <expr>)* # refact IMPLEMENT
<ret> ::= "кладу_трубочку" <var_num_func> # refact IMPLEMENT


<declaration> ::= "купи" <NAME> ("всего_за" <expr>)?

<if> ::= "сосать?" <condition> <body> (<else>)?
<while> ::= "много_сосать?" <condition> <body> (<else>)?

<else> ::= "не_сосать?" <body>
<condition> ::= "туть" <expr> "и_туть"
<body> ::= "сосать" (<statement>)* "кончать"
